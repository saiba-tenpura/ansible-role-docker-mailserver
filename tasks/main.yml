---
- name: Setup install dir
  ansible.builtin.file:
    path: "{{ dms_install_dir }}"
    state: directory
    mode: "0755"

- name: Download compose & env file
  ansible.builtin.get_url:
    url: "{{ dms_repo_url }}/{{ item }}"
    dest: "{{ dms_install_dir }}"
    mode: "0644"
  loop:
    - compose.yaml
    - mailserver.env

- name: Setup volume directories
  ansible.builtin.file:
    path: "{{ dms_install_dir }}/docker-data/dms/{{ item }}"
    state: directory
    mode: "0755"
  loop:
    - mail-data
    - mail-state
    - mail-logs
    - config

- name: Configure mailserver.env
  ansible.builtin.lineinfile:
    path: "{{ dms_install_dir }}/mailserver.env"
    regexp: "^{{ item.key }}=.*"
    line: "{{ item.key }}={{ item.value }}"
  loop: "{{ dms_env_vars | dict2items }}"

- name: Configure hostname in compose.yaml
  ansible.builtin.lineinfile:
    path: "{{ dms_install_dir }}/compose.yaml"
    regexp: '^(\s*)hostname:.*'
    line: '\1hostname: {{ dms_hostname }}'
    state: present
    backrefs: true

- name: Check if fail2ban is enabled
  ansible.builtin.lineinfile:
    path: "{{ dms_install_dir }}/mailserver.env"
    line: "ENABLE_FAIL2BAN=1"
    state: present
  check_mode: true
  register: fail2ban_enabled

- name: Add NET_ADMIN capability for fail2ban
  ansible.builtin.replace:
    path: "{{ dms_install_dir }}/compose.yaml"
    regexp: '(\s+)# cap_add:\n(\s+)#   - NET_ADMIN'
    replace: '\1cap_add:\n\2  - NET_ADMIN'
  when: not fail2ban_enabled.changed

- name: Start up containers
  community.docker.docker_compose_v2:
    project_src: "{{ dms_install_dir }}"
    state: present
  register: compose_output

- name: Check existance of email accounts
  ansible.builtin.lineinfile:
    path: "{{ dms_install_dir }}/docker-data/dms/config/postfix-accounts.cf"
    search_string: '{{ item.email }}'
    line: '{{ item.email }}'
    state: present
  check_mode: true
  register: emails_exist
  loop: "{{ dms_accounts }}"
  when: dms_accounts | length > 0

- name: Add new email accounts
  community.docker.docker_container_exec:
    container: mailserver
    command: /bin/bash -c "setup email add {{ item.email }} {{ item.password }}"
  loop: "{{ dms_accounts }}"
  loop_control:
    index_var: index
  when: emails_exist.results[index].msg == "line added"

- name: Update existing email accounts
  community.docker.docker_container_exec:
    container: mailserver
    command: /bin/bash -c "setup email update {{ item.email }} {{ item.password }}"
  loop: "{{ dms_accounts }}"
  loop_control:
    index_var: index
  when: emails_exist.results[index].msg == "line replaced"

- name: Generate DKIM key
  community.docker.docker_container_exec:
    container: mailserver
    command: /bin/bash -c "setup config dkim keysize {{ dms_dkim_keysize }}"
  when: dms_accounts | length > 0

- name: Shut down containers
  community.docker.docker_compose_v2:
    project_src: "{{ dms_install_dir }}"
    state: absent
